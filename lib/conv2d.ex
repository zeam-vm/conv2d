defmodule Conv2d do
  @moduledoc """
  Documentation for Conv2d.
  """

  @doc """
      iex> Conv2d.split_calc([[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]], [[[[1.0, 7.0, 13.0], [19.0, 25.0, 31.0], [37.0, 43.0, 49.0]], [[2.0, 8.0, 14.0], [20.0, 26.0, 32.0], [38.0, 44.0, 50.0]], [[3.0, 9.0, 15.0], [21.0, 27.0, 33.0], [39.0, 45.0, 51.0]]], [[[4.0, 10.0, 16.0], [22.0, 28.0, 34.0], [40.0, 46.0, 52.0]], [[5.0, 11.0, 17.0], [23.0, 29.0, 35.0], [41.0, 47.0, 53.0]], [[6.0, 12.0, 18.0], [24.0, 30.0, 36.0], [42.0, 48.0, 54.0]]]], {3, 3})
      [[[598.5, 615.6, 632.7]]]

      iex> Conv2d.split_calc([[[0.1, 0.3, 0.5, 0.55], [0.7, 0.9, 1.1, 1.15], [1.3, 1.5, 1.7, 1.75], [1.9, 2.1, 2.3, 2.35]],[[0.2, 0.4, 0.6, 0.65], [0.8, 1.0, 1.2, 1.25], [1.4, 1.6, 1.8, 1.85], [2.0, 2.2, 2.4, 2.45]]], [[[[1.0, 7.0, 13.0], [19.0, 25.0, 31.0], [37.0, 43.0, 49.0]], [[2.0, 8.0, 14.0], [20.0, 26.0, 32.0], [38.0, 44.0, 50.0]], [[3.0, 9.0, 15.0], [21.0, 27.0, 33.0], [39.0, 45.0, 51.0]]], [[[4.0, 10.0, 16.0], [22.0, 28.0, 34.0], [40.0, 46.0, 52.0]], [[5.0, 11.0, 17.0], [23.0, 29.0, 35.0], [41.0, 47.0, 53.0]], [[6.0, 12.0, 18.0], [24.0, 30.0, 36.0], [42.0, 48.0, 54.0]]]], {3, 3})
      [[[598.5, 615.6, 632.7], [664.6499999999999, 684.45, 704.25]], [[884.7, 912.5999999999999, 940.5], [950.8499999999999, 981.4499999999999, 1012.0500000000001]]]
  """
  def split_calc( input, weight, {dx, dy} ) do
    split(input, {dx, dy})
    |> Enum.map(fn x ->
      Enum.map(x, fn y ->
        calc(y, weight)
      end)
    end)
  end

  @doc """

  ## Examples

      iex> Conv2d.calc([[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]], [[[[1.0, 7.0, 13.0], [19.0, 25.0, 31.0], [37.0, 43.0, 49.0]], [[2.0, 8.0, 14.0], [20.0, 26.0, 32.0], [38.0, 44.0, 50.0]], [[3.0, 9.0, 15.0], [21.0, 27.0, 33.0], [39.0, 45.0, 51.0]]], [[[4.0, 10.0, 16.0], [22.0, 28.0, 34.0], [40.0, 46.0, 52.0]], [[5.0, 11.0, 17.0], [23.0, 29.0, 35.0], [41.0, 47.0, 53.0]], [[6.0, 12.0, 18.0], [24.0, 30.0, 36.0], [42.0, 48.0, 54.0]]]])
      [598.5, 615.6, 632.7]

  """
  def calc( input, weight ) do
    {x, y, n} = size(input)
    {m, ^n} = size_w(weight)
    t_input = input |> dup(m) |> t1
    t_weight = weight |> t1
    mult = Enum.zip(t_input, t_weight) |> Enum.map(& elem(&1, 0) * elem(&1, 1))

    mult
    |> Enum.chunk_every(x * y)
    |> Enum.map(fn x -> x |> Enum.reduce(0, & &1 + &2) end)
    |> Enum.chunk_every(m)
    |> Enum.zip
    |> Enum.map(fn x -> x |> Tuple.to_list |> Enum.reduce(0, & &1 + &2) end)
    |> rt1({x - 2, y - 2, m})
    |> List.flatten
  end

  @doc """

  ## Examples

      iex> Conv2d.size([[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]])
      {3, 3, 2}

      iex> Conv2d.size([[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7], [1.9, 2.1, 2.3]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8], [2.0, 2.2, 2.4]]])
      {3, 4, 2}
  """
  def size( input ) do
    {
      # X
      (input |> hd |> hd |> length),
      # Y
      (input |> hd |> length),
      # N
      (input |> length)
    }
  end

  @doc """

  ## Examples

      iex> Conv2d.size_w([[[[1.0, 7.0, 13.0], [19.0, 25.0, 31.0], [37.0, 43.0, 49.0]], [[2.0, 8.0, 14.0], [20.0, 26.0, 32.0], [38.0, 44.0, 50.0]], [[3.0, 9.0, 15.0], [21.0, 27.0, 33.0], [39.0, 45.0, 51.0]]], [[[4.0, 10.0, 16.0], [22.0, 28.0, 34.0], [40.0, 46.0, 52.0]], [[5.0, 11.0, 17.0], [23.0, 29.0, 35.0], [41.0, 47.0, 53.0]], [[6.0, 12.0, 18.0], [24.0, 30.0, 36.0], [42.0, 48.0, 54.0]]]])
      {3, 2}
  """
  def size_w( input ) do
    {
      # M
      (input |> hd |> length),
      # N
      (input |> length)
    }
  end


  @doc """

  ## Examples

      iex> Conv2d.t1([[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]])
      [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]
  """
  def t1( input ) do
    List.flatten( input )
  end

  @doc """

  ## Examples

      iex> Conv2d.rt1([0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8], {3, 3, 2})
      [[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]]
  """
  def rt1( input, {x, y, n} ) do
    input
    |> Enum.chunk_every(x)
    |> Enum.chunk_every(y)
    |> Enum.chunk_every(n)
    |> hd
  end

  @doc """

  ## Examples

      iex> Conv2d.dup([[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]], 3)
      [[[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]], [[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]], [[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]]], [[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]], [[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]], [[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]]]
  """
  def dup( input, m ) do
    input
    |> Enum.map(& Stream.unfold(m, fn
        0 -> nil
        n -> {&1, n - 1}
      end)
      |> Enum.to_list)
  end

  @doc """

  ## Examples

      iex> Conv2d.split([[[0.1, 0.3, 0.5, 0.55], [0.7, 0.9, 1.1, 1.15], [1.3, 1.5, 1.7, 1.75], [1.9, 2.1, 2.3, 2.35]],[[0.2, 0.4, 0.6, 0.65], [0.8, 1.0, 1.2, 1.25], [1.4, 1.6, 1.8, 1.85], [2.0, 2.2, 2.4, 2.45]]], {3, 3})
      [[[[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]], [[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]], [[[0.3, 0.5, 0.55], [0.9, 1.1, 1.15], [1.5, 1.7, 1.75]], [[0.4, 0.6, 0.65], [1.0, 1.2, 1.25], [1.6, 1.8, 1.85]]]], [[[[0.7, 0.9, 1.1], [1.3, 1.5, 1.7], [1.9, 2.1, 2.3]], [[0.8, 1.0, 1.2], [1.4, 1.6, 1.8], [2.0, 2.2, 2.4]]], [[[0.9, 1.1, 1.15], [1.5, 1.7, 1.75], [2.1, 2.3, 2.35]], [[1.0, 1.2, 1.25], [1.6, 1.8, 1.85], [2.2, 2.4, 2.45]]]]]

  """
  def split( input, {dx, dy} ) do
    {x, y, _} = size(input)
    split_s( input, dx, dy, x, y )
  end

  defp split_s( _input, dx, dy, x, y ) when dx > x or dy > y do
    raise "dx > x or dy > y"
  end

  defp split_s( input, dx, dy, x, y ) when dx == x and dy == y do
    [[ input ]]
  end

  defp split_s( input, dx, dy, x, y ) do
    input
    |> Enum.map(&
      Stream.interval(1)
      |> Enum.take(y - dy + 1)
      |> Enum.map(fn iy ->
        Stream.interval(1)
        |> Enum.take(x - dx + 1)
        |> Enum.map(fn ix ->
          split_ss( &1, dx, dy, ix, iy )
        end)
      end)
      )
    |> t2()
  end

  @doc """

  ## Examples

      iex> Conv2d.split_ss([[0.1, 0.3, 0.5, 0.55], [0.7, 0.9, 1.1, 1.15], [1.3, 1.5, 1.7, 1.75], [1.9, 2.1, 2.3, 2.35]], 3, 3, 0, 0)
      [[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]]

      iex> Conv2d.split_ss([[0.1, 0.3, 0.5, 0.55], [0.7, 0.9, 1.1, 1.15], [1.3, 1.5, 1.7, 1.75], [1.9, 2.1, 2.3, 2.35]], 3, 3, 1, 0)
      [[0.3, 0.5, 0.55], [0.9, 1.1, 1.15], [1.5, 1.7, 1.75]]
  """
  def split_ss( input, dx, dy, ix, iy ) do
    input
    |> Enum.slice( iy, iy + dy )
    |> Enum.map(& &1 |> Enum.slice( ix, ix + dx ))
  end

  @doc """

    # Examples
      iex> Conv2d.t2([[[[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]], [[0.3, 0.5, 0.55], [0.9, 1.1, 1.15], [1.5, 1.7, 1.75]]], [[[0.7, 0.9, 1.1], [1.3, 1.5, 1.7], [1.9, 2.1, 2.3]], [[0.9, 1.1, 1.15], [1.5, 1.7, 1.75], [2.1, 2.3, 2.35]]]], [[[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]], [[0.4, 0.6, 0.65], [1.0, 1.2, 1.25], [1.6, 1.8, 1.85]]], [[[0.8, 1.0, 1.2], [1.4, 1.6, 1.8], [2.0, 2.2, 2.4]], [[1.0, 1.2, 1.25], [1.6, 1.8, 1.85], [2.2, 2.4, 2.45]]]]])
      [[[[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]], [[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]], [[[0.3, 0.5, 0.55], [0.9, 1.1, 1.15], [1.5, 1.7, 1.75]], [[0.4, 0.6, 0.65], [1.0, 1.2, 1.25], [1.6, 1.8, 1.85]]]], [[[[0.7, 0.9, 1.1], [1.3, 1.5, 1.7], [1.9, 2.1, 2.3]], [[0.8, 1.0, 1.2], [1.4, 1.6, 1.8], [2.0, 2.2, 2.4]]], [[[0.9, 1.1, 1.15], [1.5, 1.7, 1.75], [2.1, 2.3, 2.35]], [[1.0, 1.2, 1.25], [1.6, 1.8, 1.85], [2.2, 2.4, 2.45]]]]]
  """
  def t2( input ) do
    input
    |> Enum.zip
    |> Enum.map(& Tuple.to_list(&1))
    |> Enum.map(& Enum.zip(&1))
    |> Enum.map(fn x -> Enum.map(x, & Tuple.to_list(&1)) end)
  end

  @doc """

  ## Examples

      iex> Conv2d.join([[[[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]], [[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]], [[[0.3, 0.5, 0.55], [0.9, 1.1, 1.15], [1.5, 1.7, 1.75]], [[0.4, 0.6, 0.65], [1.0, 1.2, 1.25], [1.6, 1.8, 1.85]]]], [[[[0.7, 0.9, 1.1], [1.3, 1.5, 1.7], [1.9, 2.1, 2.3]], [[0.8, 1.0, 1.2], [1.4, 1.6, 1.8], [2.0, 2.2, 2.4]]], [[[0.9, 1.1, 1.15], [1.5, 1.7, 1.75], [2.1, 2.3, 2.35]], [[1.0, 1.2, 1.25], [1.6, 1.8, 1.85], [2.2, 2.4, 2.45]]]]], {3, 3})
      [[[0.1, 0.3, 0.5, 0.55], [0.7, 0.9, 1.1, 1.15], [1.3, 1.5, 1.7, 1.75], [1.9, 2.1, 2.3, 2.35]],[[0.2, 0.4, 0.6, 0.65], [0.8, 1.0, 1.2, 1.25], [1.4, 1.6, 1.8, 1.85], [2.0, 2.2, 2.4, 2.45]]]
  """
  def join( input, {dx, dy} ) when dx == 3 and dy == 3 do
    input
    |> join_y({dx, dy})
    |> join_x({dx, dy})
  end

  @doc """

  ## Examples

    iex> Conv2d.t3( [[[0.0, 0.1, 0.2], [0.3, 0.4, 0.5]], [[0.6, 0.7, 0.8], [0.9, 1.0, 1.1]]] )
    [[[0.0, 0.1, 0.2], [0.6, 0.7, 0.8]], [[0.3, 0.4, 0.5], [0.9, 1.0, 1.1]]]
  """
  def t3( input ) do
  	input
  	|> Enum.zip
  	|> Enum.map(& &1 |> Tuple.to_list )
  end

  @doc """

  ## Examples

    iex> Conv2d.foreach(5)
    [0, 1, 2, 3, 4]

  """
  def foreach( n ) when n >= 0 do
    Stream.interval(1)
    |> Enum.take( n )
  end

  @doc """

  ## Examples

      iex> Conv2d.join_y([[[[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]], [[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]], [[[0.3, 0.5, 0.55], [0.9, 1.1, 1.15], [1.5, 1.7, 1.75]], [[0.4, 0.6, 0.65], [1.0, 1.2, 1.25], [1.6, 1.8, 1.85]]]], [[[[0.7, 0.9, 1.1], [1.3, 1.5, 1.7], [1.9, 2.1, 2.3]], [[0.8, 1.0, 1.2], [1.4, 1.6, 1.8], [2.0, 2.2, 2.4]]], [[[0.9, 1.1, 1.15], [1.5, 1.7, 1.75], [2.1, 2.3, 2.35]], [[1.0, 1.2, 1.25], [1.6, 1.8, 1.85], [2.2, 2.4, 2.45]]]]], {3, 3})
      [[[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7], [1.9, 2.1, 2.3]], [[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8], [2.0, 2.2, 2.4]]], [[[0.3, 0.5, 0.55], [0.9, 1.1, 1.15], [1.5, 1.7, 1.75], [2.1, 2.3, 2.35]], [[0.4, 0.6, 0.65], [1.0, 1.2, 1.25], [1.6, 1.8, 1.85], [2.2, 2.4, 2.45]]]]
  """
  def join_y( input, {dx, dy} ) when dx == 3 and dy == 3 do
    input
    |> t3()
    |> Enum.map(fn x ->
      x |> t3()
      end)
    |> Enum.map(fn x ->
      x
      |> Enum.map(fn y ->
        foreach(length(y))
        |> Enum.zip(y)
        |> Enum.map(& {elem(&1, 0),
          (elem(&1, 1) |> hd |> length),
          elem(&1, 1)} )
        |> Enum.map(fn i ->
          (foreach(elem(i, 0))
          |> Enum.map(fn _ -> nil
          end))
          ++ elem(i, 2)
          ++ (foreach(dx - elem(i, 0) - 2)
            |> Enum.map(fn _ -> nil
            end)
            )
        end)
        |> Enum.zip()
        |> Enum.map(fn
            {a, nil} -> a
            {nil, b} -> b
            {a, b}   ->
              (Enum.zip(a, b)
              |> Enum.map(& (elem(&1, 0) + elem(&1, 1)) / 2.0))
        end)
      end)
    end)
  end

  @doc """

  ## Examples

      iex> Conv2d.repeat(nil, 3)
      [nil, nil, nil]

  """
  def repeat( value, num ) when num >= 0 do
    foreach( num )
    |> Enum.map(fn _ -> value end)
  end

  @doc """

  ## Examples

      iex> Conv2d.size_i([[0.0, 0.0, 0.0]])
      3

  """
  def size_i( input ) do
    input |> hd |> length
  end

  @doc """

  ## Examples

      iex> Conv2d.join_x([[[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7], [1.9, 2.1, 2.3]], [[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8], [2.0, 2.2, 2.4]]], [[[0.3, 0.5, 0.55], [0.9, 1.1, 1.15], [1.5, 1.7, 1.75], [2.1, 2.3, 2.35]], [[0.4, 0.6, 0.65], [1.0, 1.2, 1.25], [1.6, 1.8, 1.85], [2.2, 2.4, 2.45]]]], {3, 3})
      [[[0.1, 0.3, 0.5, 0.55], [0.7, 0.9, 1.1, 1.15], [1.3, 1.5, 1.7, 1.75], [1.9, 2.1, 2.3, 2.35]],[[0.2, 0.4, 0.6, 0.65], [0.8, 1.0, 1.2, 1.25], [1.4, 1.6, 1.8, 1.85], [2.0, 2.2, 2.4, 2.45]]]
  """
  def join_x( input, {dx, dy} ) when dx == 3 and dy == 3 do
    input
    |> Enum.zip
    |> Enum.map(fn x -> x |> Tuple.to_list end)
    |> Enum.map(fn x ->
      foreach(length(x))
      |> Enum.zip(x) end)
    |> Enum.map(fn x ->
      x
      |> Enum.map(& {elem(&1, 0),
        size_i(elem(&1, 1)),
        elem(&1, 1)})
      |> Enum.map(fn y ->
        elem(y, 2)
        |> Enum.map(fn i ->
          repeat(nil, elem(y, 0))
          ++ i
          ++ repeat(nil, dy - elem(y, 0) - 2)
        end)
      end)
      |> Enum.zip
      |> Enum.map(fn y ->
        y
        |> Tuple.to_list
        |> Enum.zip
        |> Enum.map(fn
          {a, nil} -> a
          {nil, b} -> b
          {a, b}   -> (a + b) / 2.0
        end)
      end)
    end)
  end

end

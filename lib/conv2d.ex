defmodule Conv2d do
  @moduledoc """
  Documentation for Conv2d.
  """

  @doc """

  ## Examples

      iex> Conv2d.calc([[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]], [[[[1.0, 7.0, 13.0], [19.0, 25.0, 31.0], [37.0, 43.0, 49.0]], [[2.0, 8.0, 14.0], [20.0, 26.0, 32.0], [38.0, 44.0, 50.0]], [[3.0, 9.0, 15.0], [21.0, 27.0, 33.0], [39.0, 45.0, 51.0]]], [[[4.0, 10.0, 16.0], [22.0, 28.0, 34.0], [40.0, 46.0, 52.0]], [[5.0, 11.0, 17.0], [23.0, 29.0, 35.0], [41.0, 47.0, 53.0]], [[6.0, 12.0, 18.0], [24.0, 30.0, 36.0], [42.0, 48.0, 54.0]]]])
      [[[598.5]], [[615.6]], [[632.7]]]

  """
  def calc( input, weight ) do
    {x, y, n} = size(input)
    {m, ^n} = size_w(weight)
    t_input = input |> dup(m) |> t1
    t_weight = weight |> t1
    mult = Enum.zip(t_input, t_weight) |> Enum.map(& elem(&1, 0) * elem(&1, 1))

    mult
    |> Enum.chunk_every(x * y)
    |> Enum.map(fn x -> x |> Enum.reduce(0, & &1 + &2) end)
    |> Enum.chunk_every(m)
    |> Enum.zip
    |> Enum.map(fn x -> x |> Tuple.to_list |> Enum.reduce(0, & &1 + &2) end)
    |> rt1({x - 2, y - 2, m})
  end

  @doc """

  ## Examples

      iex> Conv2d.calc_nif([[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]], [[[[1.0, 7.0, 13.0], [19.0, 25.0, 31.0], [37.0, 43.0, 49.0]], [[2.0, 8.0, 14.0], [20.0, 26.0, 32.0], [38.0, 44.0, 50.0]], [[3.0, 9.0, 15.0], [21.0, 27.0, 33.0], [39.0, 45.0, 51.0]]], [[[4.0, 10.0, 16.0], [22.0, 28.0, 34.0], [40.0, 46.0, 52.0]], [[5.0, 11.0, 17.0], [23.0, 29.0, 35.0], [41.0, 47.0, 53.0]], [[6.0, 12.0, 18.0], [24.0, 30.0, 36.0], [42.0, 48.0, 54.0]]]])
      [[[598.5]], [[615.6]], [[632.7]]]

  """
  def calc_nif( input, weight ) do
    {x, y, n} = size(input)
    {m, ^n} = size_w(weight)
    t_input = input |> dup(m) |> t1
    t_weight = weight |> t1
    mult = Enum.zip(t_input, t_weight) |> Conv2dNif.mult

    mult
    |> Enum.chunk_every(x * y)
    |> Enum.map(fn x -> x |> Enum.reduce(0, & &1 + &2) end)
    |> Enum.chunk_every(m)
    |> Enum.zip
    |> Enum.map(fn x -> x |> Tuple.to_list |> Enum.reduce(0, & &1 + &2) end)
    |> rt1({x - 2, y - 2, m})
  end


  @doc """

  ## Examples

      iex> Conv2d.size([[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]])
      {3, 3, 2}

      iex> Conv2d.size([[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7], [1.9, 2.1, 2.3]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8], [2.0, 2.2, 2.4]]])
      {3, 4, 2}
  """
  def size( input ) do
    {
      # X
      (input |> hd |> hd |> length),
      # Y
      (input |> hd |> length),
      # N
      (input |> length)
    }
  end

  @doc """

  ## Examples

      iex> Conv2d.size_w([[[[1.0, 7.0, 13.0], [19.0, 25.0, 31.0], [37.0, 43.0, 49.0]], [[2.0, 8.0, 14.0], [20.0, 26.0, 32.0], [38.0, 44.0, 50.0]], [[3.0, 9.0, 15.0], [21.0, 27.0, 33.0], [39.0, 45.0, 51.0]]], [[[4.0, 10.0, 16.0], [22.0, 28.0, 34.0], [40.0, 46.0, 52.0]], [[5.0, 11.0, 17.0], [23.0, 29.0, 35.0], [41.0, 47.0, 53.0]], [[6.0, 12.0, 18.0], [24.0, 30.0, 36.0], [42.0, 48.0, 54.0]]]])
      {3, 2}
  """
  def size_w( input ) do
    {
      # M
      (input |> hd |> length),
      # N
      (input |> length)
    }
  end


  @doc """

  ## Examples

      iex> Conv2d.t1([[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]])
      [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]
  """
  def t1( input ) do
    List.flatten( input )
  end

  @doc """

  ## Examples

      iex> Conv2d.rt1([0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8], {3, 3, 2})
      [[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]]
  """
  def rt1( input, {x, y, n} ) do
    input
    |> Enum.chunk_every(x)
    |> Enum.chunk_every(y)
    |> Enum.chunk_every(n)
    |> hd
  end

  @doc """

  ## Examples

      iex> Conv2d.dup([[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]],[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]], 3)
      [[[[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]], [[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]], [[0.1, 0.3, 0.5], [0.7, 0.9, 1.1], [1.3, 1.5, 1.7]]], [[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]], [[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]], [[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]]]
  """
  def dup( input, m ) do
    input
    |> Enum.map(& Stream.unfold(m, fn
        0 -> nil
        n -> {&1, n - 1}
      end)
      |> Enum.to_list)
  end
end
